# -*- python -*-
#
#       Copyright 2016 INRIA - CIRAD - INRA
#
#       Distributed under the Cecill-C License.
#       See accompanying file LICENSE.txt or copy at
#           http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html
#
#       WebSite : https://github.com/openalea-incubator/astk
#
#       File author(s): Christian Fournier <Christian.Fournier@supagro.inra.fr>
#
# ==============================================================================

""" Equation for determining global horizontal irradiance (GHI),
direct normal irradiance (DNI) and diffuse horizontal irradiance under clearsky
condition or estimate them from meteorological data

This module is mainly a collection of syntactic sugar to pvlib clearsky and
irradiances packages.
"""

from __future__ import division
import numpy
import pandas
from alinea.astk.meteorology.sun_position import sun_position, \
    sun_extraradiation

try:
    import pvlib
except ImportError as e:
    raise ImportError(
        '{0}\npvlib not found on your system, you may use sun_position_astk '
        'instead OR install ephem and use sun_position_ephem OR install pvlib '
        '(recommended)'.format(e))

# default location and dates
_daydate = '2000-06-21'
_timezone = 'Europe/Paris'
_longitude = 3.52
_latitude = 43.36
_altitude = 56


def horizontal_irradiance(normal_irradiance, elevation):
    """ irradiance measured on an horizontal surface from a source
    with known elevation (degrees) and known normal irradiance
    """
    return normal_irradiance * numpy.sin(numpy.radians(elevation))


def normal_irradiance(horizontal_irradiance, elevation):
    """ irradiance measured on an surface perpendicular
    to a source with known elevation (degrees) and horizontal irradiance
    """
    return horizontal_irradiance / numpy.sin(numpy.radians(elevation))


def air_mass(zenith, altitude=0):
    """Estimate the pressure-corrected air mass
    (optical path length relative to zenital path at a location)

    Args:
        zenith : an array-like object of zenital directions (degrees)
        altitude : (float)
    """
    airmass = pvlib.atmosphere.get_relative_airmass(zenith)
    pressure = pvlib.atmosphere.alt2pres(altitude)
    am = pvlib.atmosphere.get_absolute_airmass(airmass, pressure)
    return am


def all_weather_sky_clearness(dni, dhi, sun_zenith):
    """Sky clearness as defined in all_weather sky model (Perez et al. 1993)

    Args:
        dni: direct normal irradiance
        dhi:diffuse horizontal irradiance
        sun_zenith: zenith angle of the sun (deg)

    Returns:
        sky clearness
    Details:
        R. Perez, R. Seals, J. Michalsky, "All-weather model for sky luminance distribution—Preliminary configuration and
        validation", Solar Energy, Volume 50, Issue 3, 1993, Pages 235-245,

    """
    z = numpy.radians(sun_zenith)
    return ((dhi + dni) / dhi + 1.041 * z**3) / (1 + 1.041 * z**3)


def all_weather_sky_brightness(dates, dhi, sun_zenith, altitude=0):
    """Sky brightness as defined in all_weather sky model (Perez et al. 1993)

    Args:
        dates: A pandas datetime index (as generated by pandas.date_range)
        dhi: diffuse horizontal irradiance
        sun_zenith: zenith angle of the sun (deg)
        altitude: altitude of the location

    Returns:
        sky brightness
    Details:
        R. Perez, R. Seals, J. Michalsky, "All-weather model for sky luminance distribution—Preliminary configuration and
        validation", Solar Energy, Volume 50, Issue 3, 1993, Pages 235-245.
    """
    am = air_mass(sun_zenith, altitude)
    dni_extra = sun_extraradiation(dates)
    return am * dhi / dni_extra


def clearness_index(dates, ghi):
    """Clearness index (Liu and Jordan 1960)

    Args:
        dates: A pandas datetime index (as generated by pandas.date_range)
        ghi: global horizontal irradiance

    Returns:
        clearness index

    Details:
        Benjamin Y.H. Liu, Richard C. Jordan, "The interrelationship and characteristic distribution of direct, diffuse
        and total solar radiation", Solar Energy, Volume 4, Issue 3, 1960, Pages 1-19.
    """
    dni_extra = sun_extraradiation(dates)
    return ghi / dni_extra


def micromol_per_joule(dates, ghi, sun_elevation, temp_dew=None):
    """Conversion factor between micromol of PAR and Joule of broadband shortwave solar radiation (Alados et al. 1996)

    Args:
        dates: A pandas datetime index (as generated by pandas.date_range)
        ghi: global horizontal irradiance (W.m-2)
        sun_elevation: the elevation angle of the sun (deg)
        temp_dew: the dew point temperature (°C) (optional, yields better estimates)

    Details:
        I. Alados, I. Foyo-Moreno, L. Alados-Arboledas, "Photosynthetically active radiation: measurements and modelling",
        Agricultural and Forest Meteorology, Volume 78, Issues 1–2, 1996, Pages 121-131,
    """
    beta = numpy.radians(sun_elevation)
    kt = clearness_index(dates, ghi)
    if temp_dew is None:
        return 1.832 - 0.191 * numpy.log(kt) + 0.099 * numpy.sin(beta)
    else:
        return 1.791 - 0.190 * numpy.log(kt) + 0.005 * temp_dew + 0.049 * numpy.sin(beta)


def clear_sky_irradiances(dates=None, daydate=_daydate, longitude=_longitude,
                          latitude=_latitude, altitude=_altitude,
                          timezone=_timezone):
    """ Estimate component of sky irradiance for clear sky conditions

    Args:
        dates: A pandas datetime index (as generated by pandas.date_range). If
            None, daydate is used.
        daydate: (str) yyyy-mm-dd (not used if dates is not None).
        longitude: (float) in degrees
        latitude: (float) in degrees
        altitude: (float) in meter
        timezone:(str) the time zone (not used if dates are already localised)

    Returns:
        a pandas dataframe with global horizontal irradiance, direct normal
        irradiance and diffuse horizontal irradiance.

    Details:
        P. Ineichen and R. Perez, "A New airmass independent formulation for
        the Linke turbidity coefficient", Solar Energy, vol 73, pp. 151-157,
        2002
    """

    location = dict(latitude=latitude,
                    longitude=longitude,
                    altitude=altitude,
                    timezone=timezone)
    df = sun_position(dates=dates, daydate=daydate, **location)

    tl = pvlib.clearsky.lookup_linke_turbidity(df.index, latitude,
                                               longitude)
    am = air_mass(df['zenith'], altitude)
    dni_extra = sun_extraradiation(df.index)
    clearsky = pvlib.clearsky.ineichen(df['zenith'], am, tl,
                                       dni_extra=dni_extra,
                                       altitude=altitude)
    clearsky = pandas.concat([df, clearsky], axis=1)

    return clearsky.loc[:, ['ghi', 'dni', 'dhi']]


def actual_sky_irradiances(dates=None, daydate=_daydate, ghi=None,
                           attenuation=None,
                           pressure=101325, temp_dew=None, longitude=_longitude,
                           latitude=_latitude, altitude=_altitude,
                           timezone=_timezone):
    """ Estimate component of sky irradiances from measured actual global
    horizontal irradiance or attenuated clearsky conditions.

    Args:
        dates: A pandas datetime index (as generated by pandas.date_range). If
            None, daydate is used.
        daydate: (str) yyyy-mm-dd (not used if dates is not None).
        ghi: (array_like) : global horizontal irradiance (W. m-2).If None
         (default) clear_sky irradiance are used
        attenuation: (float) a attenuation factor for ghi (actual_ghi =
         attenuation * ghi). If None (default), no attenuation is applied
        pressure: the site pressure (Pa) (for dirint model)
        temp_dew: the dew point temperature (dirint model)
        longitude: (float) in degrees
        latitude: (float) in degrees
        altitude: (float) in meter
        timezone:(str) the time zone (not used if dates are already localised)

    Returns:
        a pandas dataframe with global horizontal irradiance, direct normal
        irradiance and diffuse horizontal irradiance.

    Details:
        Perez, R., P. Ineichen, E. Maxwell, R. Seals and A. Zelenka, (1992).
        Dynamic Global-to-Direct Irradiance Conversion Models.
        ASHRAE Transactions-Research Series, pp. 354-369
    """

    location = dict(latitude=latitude,
                    longitude=longitude,
                    altitude=altitude,
                    timezone=timezone)
    df = sun_position(dates=dates, daydate=daydate, **location)

    if ghi is None:
        cs = clear_sky_irradiances(dates=df.index, **location)
        ghi = cs['ghi']

    df['ghi'] = ghi

    if attenuation is not None:
        df.ghi *= attenuation

    df['dni'] = pvlib.irradiance.dirint(df.ghi, 90 - df.elevation, df.index,
                                        pressure=pressure, temp_dew=temp_dew)
    df['dhi'] = df.ghi - horizontal_irradiance(df.dni, df.elevation)

    return df.loc[:, ('ghi', 'dhi', 'dni')]


def sky_irradiances(dates=None, daydate=_daydate, ghi=None, dhi=None,
                           attenuation=None,
                           pressure=101325, temp_dew=None, longitude=_longitude,
                           latitude=_latitude, altitude=_altitude,
                           timezone=_timezone):
    """ Estimate variables related to sky irradiance.

    Args:
        dates: A pandas datetime index (as generated by pandas.date_range). If
            None, daydate is used.
        daydate: (str) yyyy-mm-dd (not used if dates is not None).
        ghi: (array_like) : global horizontal irradiance (W. m-2).If None
         (default) clear_sky irradiance are used
        dhi: (array-like): diffuse horizontal irradiance
        attenuation: (float) a attenuation factor for ghi (actual_ghi =
         attenuation * ghi). If None (default), no attenuation is applied. If
         dhi is not None, this parameter is not taken into account.
        pressure: the site pressure (Pa) (for dirint model)
        temp_dew: the dew point temperature (dirint model)
        longitude: (float) in degrees
        latitude: (float) in degrees
        altitude: (float) in meter
        timezone:(str) the time zone (not used if dates are already localised)

    Returns:
        a pandas dataframe with azimuth, zenital and elevation angle of the sun, global horizontal irradiance, direct
        normal irradiance and diffuse horizontal irradiance of the sky.
    """

    location = dict(latitude=latitude,
                    longitude=longitude,
                    altitude=altitude,
                    timezone=timezone)
    df = sun_position(dates=dates, daydate=daydate, **location)
    df = df.rename(columns={'azimuth': 'sun_azimuth', 'elevation': 'sun_elevation', 'zenith': 'sun_zenith'})
    if len(df) < 1:  # night
        if ghi is not None:  # twilight conditions (sun_el < 0, ghi > 0)
            df = sun_position(dates=dates, daydate=daydate, filter_night=False, **location)
            df['ghi'] = ghi
            df['dhi'] = ghi
            df['dni'] = 0
            df = df.loc[df.ghi > 0, :]
        else:
            df['ghi'] = 0
            df['dhi'] = 0
            df['dni'] = 0
    else:   # day
        if ghi is None or dhi is None:
            irr = actual_sky_irradiances(dates=df.index, ghi=ghi,
                                         attenuation=attenuation, pressure=pressure,
                                         temp_dew=temp_dew, **location)
            df = pandas.concat([df, irr], axis=1)
        else:
            df['ghi'] = ghi
            df['dhi'] = dhi
            df['dni'] = normal_irradiance(numpy.array(ghi) - numpy.array(dhi),
                                          df.elevation)
    return df.loc[:,
           ['sun_azimuth', 'sun_zenith', 'sun_elevation', 'ghi', 'dni', 'dhi']]


def mean_shortwave_irradiance(sky_irradiance, relative_global_irradiances, areas):
    df = sky_irradiance
    return df.ghi.mean() * relative_global_irradiances * areas / areas.sum()


def mean_ppfd(sky_irradiance, relative_global_irradiances, areas, temp_dew=None):
    df = sky_irradiance
    par = df.ghi * micromol_per_joule(df.index, df.ghi, df.sun_elevation, temp_dew=temp_dew)
    return par.mean() * relative_global_irradiances * areas / areas.sum()


def ipar(sky_irradiance, relative_global_irradiances, areas):
    return mean_ppfd(sky_irradiance, relative_global_irradiances, areas) * areas.sum() * 3600 * 4.57 / 1e6


def ppfd_h(sky_irradiance, relative_direct_irradiance_h, relative_diffuse_irradiance_h, areas):
    pass


def short_wave_h(sky_irradiance, relative_direct_irradiance_h, relative_diffuse_irradiance_h):
    pass


